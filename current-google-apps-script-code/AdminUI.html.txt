<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Inventory Control</title>
  
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">

  <style>
    :root {
      --primary-color: #0d6efd;
      --background-color: #f8f9fa;
      --card-bg-color: #ffffff;
      --text-color: #212529;
      --border-color: #dee2e6;
    }
    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--background-color);
      color: var(--text-color);
      padding-bottom: 80px;
    }
    .page { display: none; }
    .page.active { display: block; }
    .card {
      border: 1px solid var(--border-color);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    }
    .bottom-nav {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      height: 65px;
      background-color: var(--card-bg-color);
      display: flex;
      justify-content: space-around;
      align-items: center;
      box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.08);
      border-top: 1px solid var(--border-color);
    }
    .nav-item-bottom {
      display: flex;
      flex-direction: column;
      align-items: center;
      cursor: pointer;
      color: #6c757d;
      font-size: 0.75rem;
    }
    .nav-item-bottom.active { color: var(--primary-color); }
    .nav-item-bottom i { font-size: 1.5rem; margin-bottom: 2px; }
    #loading-overlay {
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background-color: rgba(0, 0, 0, 0.5); z-index: 1060;
      display: none; justify-content: center; align-items: center;
    }
    .toast-container { z-index: 1070; }
    #sale-list .list-group-item {
      display: flex; justify-content: space-between; align-items: center;
    }
    
    /* --- CUSTOM SKU SELECTOR & CLEAR BUTTON STYLES --- */
    .sku-selector { position: relative; }
    .sku-selector .form-control { padding-right: 2.5rem; /* Space for clear button */ }
    .btn-clear-sku {
      position: absolute;
      right: 0.75rem;
      /* Position vertically centered within the input field area */
      top: calc(50% + 12px); /* Adjust based on label height */
      transform: translateY(-50%);
      border: none;
      background: transparent;
      font-size: 1.5rem;
      color: #999;
      padding: 0;
      line-height: 1;
      display: none; /* Hidden by default */
      cursor: pointer;
    }
    .sku-dropdown-menu {
      position: absolute; top: 100%; left: 0; right: 0;
      border: 1px solid var(--border-color); border-top: none;
      max-height: 200px; overflow-y: auto;
      background-color: var(--card-bg-color);
      z-index: 1000;
      display: none;
    }
    .sku-dropdown-item { padding: 0.5rem 1rem; cursor: pointer; }
    .sku-dropdown-item:hover { background-color: var(--background-color); }
  </style>
</head>
<body>

  <div class="container mt-4">
    <h3 class="mb-4 text-center" id="page-title">Transfer</h3>

    <div id="transfer-page" class="page active">
      <div class="card">
        <div class="card-body">
          <form id="transfer-form">
            <input type="hidden" name="mode" value="transfer">
            <div class="mb-3 sku-selector">
              <label for="transfer-sku" class="form-label">SKU</label>
              <input type="text" class="form-control" id="transfer-sku" name="sku" required autocomplete="off" placeholder="Type to search...">
              <button type="button" class="btn-clear-sku" id="transfer-sku-clear">&times;</button>
              <div class="sku-dropdown-menu" id="transfer-sku-dropdown"></div>
            </div>
            <div class="mb-3">
              <label class="form-label">Source Location</label>
              <input type="hidden" name="source" id="transfer-source-value" value="Warehouse">
              <div class="btn-group w-100" role="group" id="transfer-source-buttons">
                <button type="button" class="btn btn-outline-primary active" data-value="Warehouse">Warehouse</button>
                <button type="button" class="btn btn-outline-primary" data-value="Shop">Shop</button>
              </div>
              <div class="form-text">Current Stock: <span id="transfer-stock-display">N/A</span></div>
            </div>
            <div class="mb-3">
              <label for="transfer-quantity" class="form-label">Quantity to Transfer</label>
              <input type="number" class="form-control" id="transfer-quantity" name="quantity" min="1" required>
            </div>
            <div class="mb-3">
                <label for="transfer-notes" class="form-label">Notes (Optional)</label>
                <input type="text" class="form-control" id="transfer-notes" name="notes">
            </div>
            <div class="d-grid"><button type="submit" class="btn btn-primary">Submit Transfer</button></div>
          </form>
        </div>
      </div>
    </div>

    <div id="receiving-page" class="page">
       <div class="card">
        <div class="card-body">
          <form id="receiving-form">
            <input type="hidden" name="mode" value="receiving">
            <div class="mb-3 sku-selector">
              <label for="receiving-sku" class="form-label">SKU</label>
              <input type="text" class="form-control" id="receiving-sku" name="sku" required autocomplete="off" placeholder="Type to search...">
              <button type="button" class="btn-clear-sku" id="receiving-sku-clear">&times;</button>
              <div class="sku-dropdown-menu" id="receiving-sku-dropdown"></div>
            </div>
            <div class="mb-3">
              <label class="form-label">Destination</label>
               <input type="hidden" name="destination" id="receiving-destination-value" value="Warehouse">
               <div class="btn-group w-100" role="group" id="receiving-destination-buttons">
                <button type="button" class="btn btn-outline-primary active" data-value="Warehouse">Warehouse</button>
                <button type="button" class="btn btn-outline-primary" data-value="Shop">Shop</button>
              </div>
            </div>
            <div class="mb-3">
              <label for="receiving-quantity" class="form-label">Quantity Received</label>
              <input type="number" class="form-control" id="receiving-quantity" name="quantity" min="1" required>
            </div>
            <div class="mb-3">
                <label for="receiving-notes" class="form-label">Notes (Optional)</label>
                <input type="text" class="form-control" id="receiving-notes" name="notes">
            </div>
            <div class="d-grid"><button type="submit" class="btn btn-primary">Log Receiving</button></div>
          </form>
        </div>
      </div>
    </div>

    <div id="adjustment-page" class="page">
      <div class="card">
        <div class="card-body">
          <form id="adjustment-form">
            <input type="hidden" name="mode" value="adjustment">
            <div class="mb-3 sku-selector">
              <label for="adj-sku" class="form-label">SKU</label>
              <input type="text" class="form-control" id="adj-sku" name="sku" required autocomplete="off" placeholder="Type to search...">
              <button type="button" class="btn-clear-sku" id="adj-sku-clear">&times;</button>
              <div class="sku-dropdown-menu" id="adj-sku-dropdown"></div>
            </div>
            <div class="mb-3">
              <label class="form-label">Location</label>
              <input type="hidden" name="location" id="adj-location-value" value="Warehouse">
              <div class="btn-group w-100" role="group" id="adj-location-buttons">
                <button type="button" class="btn btn-outline-primary active" data-value="Warehouse">Warehouse</button>
                <button type="button" class="btn btn-outline-primary" data-value="Shop">Shop</button>
              </div>
              <div class="form-text">Current System Stock: <span id="adj-stock-display">N/A</span></div>
            </div>
            <div class="mb-3">
              <label for="adj-new-quantity" class="form-label">New Physical Quantity</label>
              <input type="number" class="form-control" id="adj-new-quantity" name="newQuantity" min="0" required>
            </div>
            <div class="mb-3">
                <label for="adj-notes" class="form-label">Notes (e.g., "Annual stock take")</label>
                <input type="text" class="form-control" id="adj-notes" name="notes" required>
            </div>
            <div class="d-grid"><button type="submit" class="btn btn-primary">Submit Adjustment</button></div>
          </form>
        </div>
      </div>
    </div>

    <div id="sale-page" class="page">
        <div class="card mb-3">
            <div class="card-body">
                <form id="sale-add-item-form">
                    <div class="mb-3 sku-selector">
                        <label for="sale-sku" class="form-label">SKU</label>
                        <input type="text" class="form-control" id="sale-sku" autocomplete="off" placeholder="Type to search...">
                         <button type="button" class="btn-clear-sku" id="sale-sku-clear">&times;</button>
                         <div class="sku-dropdown-menu" id="sale-sku-dropdown"></div>
                    </div>
                    <div class="mb-3">
                        <label for="sale-quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" id="sale-quantity" min="1" placeholder="e.g., 5">
                    </div>
                    <div class="d-grid"><button type="submit" class="btn btn-secondary">Add Item to List</button></div>
                </form>
            </div>
        </div>
        <div class="card">
            <div class="card-header">Items to Submit (<span id="sale-item-count">0</span>)</div>
            <div class="card-body">
                 <ul class="list-group" id="sale-list"></ul>
                 <div class="mb-3 mt-3">
                    <label for="sale-notes" class="form-label">General Notes (Optional)</label>
                    <input type="text" class="form-control" id="sale-notes">
                </div>
                 <div class="d-grid mt-3"><button id="submit-sale-btn" class="btn btn-primary">Submit All Sales</button></div>
            </div>
        </div>
    </div>
  </div>

  <nav class="bottom-nav">
    <div class="nav-item-bottom active" data-page="transfer-page" data-title="Transfer"><i class="bi bi-arrow-repeat"></i><span>Transfer</span></div>
    <div class="nav-item-bottom" data-page="receiving-page" data-title="Receiving"><i class="bi bi-box-arrow-in-down"></i><span>Receiving</span></div>
    <div class="nav-item-bottom" data-page="adjustment-page" data-title="Adjustment"><i class="bi bi-pencil-square"></i><span>Adjust</span></div>
    <div class="nav-item-bottom" data-page="sale-page" data-title="Sale"><i class="bi bi-cart-check"></i><span>Sale</span></div>
  </nav>
  <div id="loading-overlay"><div class="spinner-border text-light" role="status"><span class="visually-hidden">Loading...</span></div></div>
  <div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="notificationToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="me-auto" id="toast-title">Notification</strong>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
      </div>
      <div class="toast-body" id="toast-body"></div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let ALL_SKUS = [];
    let INVENTORY_SNAPSHOT = {};
    let SALE_ITEMS = [];

    function showLoading() { document.getElementById('loading-overlay').style.display = 'flex'; }
    function hideLoading() { document.getElementById('loading-overlay').style.display = 'none'; }
    
    function showToast(title, message, isSuccess) {
      const toastEl = document.getElementById('notificationToast');
      const toastTitle = document.getElementById('toast-title');
      const toastBody = document.getElementById('toast-body');
      toastTitle.textContent = title;
      toastBody.textContent = message;
      toastEl.classList.remove('text-bg-success', 'text-bg-danger');
      toastEl.classList.add(isSuccess ? 'text-bg-success' : 'text-bg-danger');
      new bootstrap.Toast(toastEl).show();
    }

    function switchPage(pageId, title) {
      document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
      document.getElementById(pageId).classList.add('active');
      document.getElementById('page-title').textContent = title;
      document.querySelectorAll('.nav-item-bottom').forEach(item => {
        item.classList.toggle('active', item.dataset.page === pageId);
      });
    }

    function updateStockDisplay() {
      const transferSku = document.getElementById('transfer-sku').value.trim().toUpperCase();
      const transferLoc = document.getElementById('transfer-source-value').value;
      const transferKey = `${transferSku}|${transferLoc}`;
      document.getElementById('transfer-stock-display').textContent = INVENTORY_SNAPSHOT[transferKey] || 0;

      const adjSku = document.getElementById('adj-sku').value.trim().toUpperCase();
      const adjLoc = document.getElementById('adj-location-value').value;
      const adjKey = `${adjSku}|${adjLoc}`;
      document.getElementById('adj-stock-display').textContent = INVENTORY_SNAPSHOT[adjKey] || 0;
    }

    function createCustomSkuSelector(inputId) {
      const inputEl = document.getElementById(inputId);
      const dropdownEl = document.getElementById(`${inputId}-dropdown`);
      const clearBtnEl = document.getElementById(`${inputId}-clear`);

      const updateDropdown = () => {
        const filter = inputEl.value.toUpperCase();
        dropdownEl.innerHTML = '';
        
        const hasText = filter.length > 0;
        clearBtnEl.style.display = hasText ? 'block' : 'none';

        if (!hasText) {
          dropdownEl.style.display = 'none';
          return;
        }

        const filteredSkus = ALL_SKUS.filter(sku => sku.toUpperCase().includes(filter));
        if (filteredSkus.length === 0) {
          dropdownEl.style.display = 'none';
          return;
        }

        filteredSkus.slice(0, 50).forEach(sku => {
          const item = document.createElement('div');
          item.className = 'sku-dropdown-item';
          item.textContent = sku;
          item.addEventListener('click', () => {
            inputEl.value = sku;
            dropdownEl.style.display = 'none';
            clearBtnEl.style.display = 'block';
            inputEl.dispatchEvent(new Event('input'));
          });
          dropdownEl.appendChild(item);
        });
        dropdownEl.style.display = 'block';
      };

      inputEl.addEventListener('input', updateDropdown);
      inputEl.addEventListener('focus', updateDropdown);

      clearBtnEl.addEventListener('click', () => {
        inputEl.value = '';
        clearBtnEl.style.display = 'none';
        dropdownEl.style.display = 'none';
        inputEl.focus();
        inputEl.dispatchEvent(new Event('input'));
      });

      document.addEventListener('click', (e) => {
        if (!inputEl.parentElement.contains(e.target)) {
          dropdownEl.style.display = 'none';
        }
      });
    }

    function renderSaleList() {
      const listEl = document.getElementById('sale-list');
      listEl.innerHTML = '';
      SALE_ITEMS.forEach((item, index) => {
        const li = document.createElement('li');
        li.className = 'list-group-item';
        li.innerHTML = `<span><strong>${item.sku}</strong> <br><small>Qty: ${item.quantity}</small></span><button class="btn btn-sm btn-outline-danger" onclick="removeSaleItem(${index})"><i class="bi bi-trash"></i></button>`;
        listEl.appendChild(li);
      });
      document.getElementById('sale-item-count').textContent = SALE_ITEMS.length;
    }

    function addSaleItem(e) {
      e.preventDefault();
      const skuInput = document.getElementById('sale-sku');
      const qtyInput = document.getElementById('sale-quantity');
      const sku = skuInput.value.trim().toUpperCase();
      const quantity = parseInt(qtyInput.value, 10);
      if (!sku || !quantity || quantity < 1) {
        showToast('Error', 'Please enter a valid SKU and quantity.', false);
        return;
      }
      SALE_ITEMS.push({ sku, quantity });
      renderSaleList();
      skuInput.value = '';
      qtyInput.value = '';
      document.getElementById('sale-sku-clear').style.display = 'none';
      skuInput.focus();
    }

    function removeSaleItem(index) {
      SALE_ITEMS.splice(index, 1);
      renderSaleList();
    }
    
    function submitSale() {
      if (SALE_ITEMS.length === 0) {
        showToast('Error', 'No items to submit.', false);
        return;
      }
      const notes = document.getElementById('sale-notes').value;
      const data = { mode: 'bulk-sale', sales: SALE_ITEMS, notes: notes };
      showLoading();
      google.script.run.withSuccessHandler(response => {
        handleServerResponse(response);
        if (response.success) {
          SALE_ITEMS = [];
          renderSaleList();
          document.getElementById('sale-add-item-form').reset();
          document.getElementById('sale-notes').value = '';
        }
      }).withFailureHandler(handleServerError).processAdminAction(data);
    }

    function handleServerResponse(response) {
      hideLoading();
      if (response.success) {
        showToast('Success', response.message, true);
        google.script.run.withSuccessHandler(data => {
          INVENTORY_SNAPSHOT = data;
          updateStockDisplay();
        }).getInventorySnapshotData();
      } else {
        showToast('Error', response.message, false);
      }
    }
    
    function handleServerError(error) {
      hideLoading();
      showToast('Server Error', error.message, false);
    }

    function processForm(formId) {
      const form = document.getElementById(formId);
      const data = Object.fromEntries(new FormData(form).entries());
      showLoading();
      google.script.run.withSuccessHandler(response => {
        handleServerResponse(response);
        if (response.success) {
          form.reset();
          form.querySelector('.btn-clear-sku').style.display = 'none';
          const buttonGroup = form.querySelector('.btn-group');
          if (buttonGroup) {
            buttonGroup.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
            const firstButton = buttonGroup.querySelector('.btn:first-child');
            firstButton.classList.add('active');
            const hiddenInput = form.querySelector('input[type="hidden"]');
            if (hiddenInput) {
              hiddenInput.value = firstButton.dataset.value;
            }
          }
          updateStockDisplay();
        }
      }).withFailureHandler(handleServerError).processAdminAction(data);
    }

    document.addEventListener('DOMContentLoaded', () => {
      const buttonGroups = [
        { group: 'transfer-source-buttons', input: 'transfer-source-value' },
        { group: 'receiving-destination-buttons', input: 'receiving-destination-value' },
        { group: 'adj-location-buttons', input: 'adj-location-value' }
      ];
      buttonGroups.forEach(config => {
        const groupEl = document.getElementById(config.group);
        const inputEl = document.getElementById(config.input);
        if (groupEl) {
          groupEl.addEventListener('click', (e) => {
            const button = e.target.closest('button');
            if (button) {
              inputEl.value = button.dataset.value;
              groupEl.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));
              button.classList.add('active');
              if (config.group !== 'receiving-destination-buttons') {
                updateStockDisplay();
              }
            }
          });
        }
      });
      
      google.script.run.withSuccessHandler(skus => {
        ALL_SKUS = skus;
        createCustomSkuSelector('transfer-sku');
        createCustomSkuSelector('receiving-sku');
        createCustomSkuSelector('adj-sku');
        createCustomSkuSelector('sale-sku');
      }).getAllSkus();

      google.script.run.withSuccessHandler(data => {
        INVENTORY_SNAPSHOT = data;
        updateStockDisplay();
      }).getInventorySnapshotData();
      
      document.querySelectorAll('.nav-item-bottom').forEach(item => {
        item.addEventListener('click', () => switchPage(item.dataset.page, item.dataset.title));
      });

      document.getElementById('transfer-form').addEventListener('submit', (e) => { e.preventDefault(); processForm('transfer-form'); });
      document.getElementById('receiving-form').addEventListener('submit', (e) => { e.preventDefault(); processForm('receiving-form'); });
      document.getElementById('adjustment-form').addEventListener('submit', (e) => { e.preventDefault(); processForm('adjustment-form'); });
      document.getElementById('sale-add-item-form').addEventListener('submit', addSaleItem);
      document.getElementById('submit-sale-btn').addEventListener('click', submitSale);

      ['transfer-sku', 'adj-sku'].forEach(id => {
        document.getElementById(id).addEventListener('input', updateStockDisplay);
      });
    });
  </script>

</body>
</html>